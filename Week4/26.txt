class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
     int size1 = text1.size();
		int size2 = text2.size();
		
		int dp[size1+1][size2 +1];
		//dp[i][j] = LCS(text1_i, text2_j), here LCS denotes
		//the length of the longest common subsequence of
		//text1_i (= text1[0: i-1]) and text2_j (= text2[0:j-1])
		
		//Initialize dp[0][i] and dp[j][0] to be zero 
		//since one of the string is empty in this case
		for (int i = 0; i <= size2; i++) {
			dp[0][i] = 0;
		}
		for (int j = 0; j <= size1; j++) {
			dp[j][0] = 0;
		}
		
		//dynamic programming
		for (int i = 1; i <= size1; i++) {
			for(int j = 1; j <= size2; j++) {
				if(text1[i-1] == text2[j-1]) {
					//If the last characters of text1 and text2 are equal
					//then LCS(text1_i, text2_j) = LCS(text1_{i-1}, text2_{j-1}) +1
					dp[i][j] = dp[i-1][j-1] + 1;
				} else {
					//if the last characters are different
					//then LCS(text1_i, text2_j) = max(LCS(text1_{i-1}, text2_j), LCS(text1_i, text2_{j-1}))
					dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
				}
			}
		}
		//Return the max length
		return dp[size1][size2];
	
    }
};
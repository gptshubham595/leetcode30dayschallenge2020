    class LRUCache {
    public:
    
        unordered_map<int,int> m;
        vector<int> v;
        
        int cap;
        LRUCache(int capacity) {
            cap=capacity;
        }
        
        int get(int key) {
            auto it=m.find(key);
            if(it!=m.end()){
                for(int i=0;i<v.size();i++)
                if(v[i]==key){
                    v.push_back(v[i]);
                    v.erase(v.begin()+i);
                    break;
                }
                return it->second;
            }

            return -1;
        }

        void put(int key, int value) {            
            int flag=-1;
            auto it=m.find(key);
            if(m.size()==cap && it==m.end())
            {   
                m.erase(v.front());
                v.erase(v.begin());
            }   

                 m[key]=value;
                for(int i=0;i<v.size();i++)
                    if(v[i]==key){
                        v.push_back(v[i]);
                        v.erase(v.begin()+i);
                        flag=1;
                        break;
                    }
                if(flag!=1)
                 v.push_back(key);
            
        }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */